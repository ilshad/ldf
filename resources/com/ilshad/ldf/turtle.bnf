turtleDoc             ::= statement*
<statement>           ::= directive | WSE* triples WS* <'.'> WSE*
<directive>           ::= prefix | base
prefix                ::= WS* prefixID WSE* | WS* sparqlPrefix WSE*
base                  ::= WS* regBase WSE* | WS* sparqlBase WSE*
<prefixID>            ::= <'@prefix'> WS+ PNAME_NS WS+ iri WS* <'.'>
<regBase>             ::= <'@base'> WS+ iri WS+ <'.'>
<sparqlBase>          ::= <#'[BbAaSsEe]+'> WS+ iri
<sparqlPrefix>        ::= <#'[PpRrEeFfIiXx]+'> WS+ PNAME_NS WS+ iri
triples               ::= subject WSE+ predicateObjectList | blankNodePropertyList WSE+ predicateObjectList?
predicateObjectList   ::= predicate WSE+ objectList WSE* (<';'> WSE+ (predicate WS+ objectList)?)*
objectList            ::= object WSE* (<','> WSE* object)*
<predicate>           ::= verb | a
a                     ::= 'a'
<subject>             ::= iri | BlankNode | collection
<verb>                ::= iri
<object>              ::= iri | BlankNode | collection | blankNodePropertyList | literal
<literal>             ::= RDFLiteral | NumericLiteral | BooleanLiteral
blankNodePropertyList ::= <'['> WSE* predicateObjectList WSE* <']'>
collection            ::= <'('> object-wse* <')'>
<object-wse>          ::= object | WSE*
<NumericLiteral>      ::= integer | decimal | double
RDFLiteral            ::= string (langtag | <'^^'> iri)?
BooleanLiteral        ::= 'true' | 'false'
<string>              ::= STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE
iri                   ::= IRIREF | PrefixedName
PrefixedName          ::= PNAME_LN | PNAME_NS
BlankNode             ::= BLANK_NODE_LABEL | ANON
<EOL>                 ::= <#'[\n\r]+'>
<IRIREF>              ::= FULLIRI | ref
ref                   ::= <'<'> (#'[^\u0000-\u0020<>\"{}:|^`\\]+' | UCHAR)* <'>'>
<FULLIRI>             ::= <'<'> (#'[^\u0000-\u0020<>\"{}|^`\\]*' | UCHAR)* <'>'>
<PNAME_NS>            ::= PN_PREFIX? ':'
<PNAME_LN>            ::= PNAME_NS PN_LOCAL
<BLANK_NODE_LABEL>    ::= '_:' (PN_CHARS_U | #'[0-9]') ((PN_CHARS | '.')* PN_CHARS)?
langtag               ::= '@' #'[a-zA-Z]+' ('-' #'[a-zA-Z0-9]+')*
integer               ::= #'[+-]'? #'[0-9]+'
decimal               ::= #'[+-]'? #'[0-9]*' '.' #'[0-9]+'
double                ::= #'[+-]'? (#'[0-9]+' '.' #'[0-9]*' EXPONENT | '.' #'[0-9]+' EXPONENT | #'[0-9]+' EXPONENT)
<EXPONENT>            ::= #'[eE]' #'[+-]'? #'[0-9]'+
<STRING_LITERAL_QUOTE>  ::= <'"'> line-double <'"'>
<line-single>         ::= (#'[^\u0022\u005C\u000A\u000D\']*' | ECHAR | UCHAR)*
<line-double>         ::= (#'[^\u0022\u005C\u000A\u000D\"]*' | ECHAR | UCHAR)*
<STRING_LITERAL_SINGLE_QUOTE>      ::= <"\'"> line-single <"\'">
<STRING_LITERAL_LONG_SINGLE_QUOTE> ::= <"\'\'\'"> multi-line-single <"\'\'\'">
<multi-line-double>                ::= (('"' | '""')? (#'[^\"\\]*' | ECHAR | UCHAR))*
<multi-line-single>                ::= (("\'" | "\'\'")? (#'[^\'\\]*' | ECHAR | UCHAR))*
<STRING_LITERAL_LONG_QUOTE>        ::= <'"""'> multi-line-double <'"""'>
<UCHAR>               ::= '\\u' HEX HEX HEX HEX | '\\U' HEX HEX HEX HEX HEX HEX HEX HEX
<ECHAR>               ::= '\\' #'[tbnrf"\'\\]'
<WSE>                 ::= WS?  EOL?
<WS>                  ::= <#'[ \t]*'> | <#'#.*'>
<ANON>                ::= '[' WSE* ']'
<PN_CHARS_BASE>       ::= #'[a-zA-Z]+'         | #'[\u00C0-\u00D6]+' |
                          #'[\u00D8-\u00F6]+'  | #'[\u00F8-\u02FF]+' |
                          #'[\u0370-\u037D]+'  | #'[\u037F-\u1FFF]+' |
                          #'[\u200C-\u200D]+'  | #'[\u2070-\u218F]+' |
                          #'[\u2C00-\u2FEF]+'  | #'[\u3001-\uD7FF]+' |
                          #'[\uF900-\uFDCF]+'  | #'[\uFDF0-\uFFFD]+' |
                          #'[\x{10000}-\x{EFFFF}]+'
<PN_CHARS_U>          ::= PN_CHARS_BASE | '_'
<PN_CHARS>            ::= PN_CHARS_U | '-' | #'[0-9]' | '\\u00B7' | #'[\u0300-\u036F]' | #'[\u203F-\u2040]'
<PN_PREFIX>           ::= PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
<PN_LOCAL>            ::= (PN_CHARS_U | ':' | #'[0-9]+' | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
<PLX>                 ::= PERCENT | PN_LOCAL_ESC
<PERCENT>             ::= '%' HEX HEX
<HEX>                 ::= #'[0-9]' | #'[A-F]' | #'[a-f]'
<PN_LOCAL_ESC>        ::= '\\u005C' ('_' | '~' | '.' | '-' | '!' | '$' | '&' | '\\u0027' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%')
